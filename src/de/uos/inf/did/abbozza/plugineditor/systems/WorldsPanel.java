/*
 * Copyright 2019 michael.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.uos.inf.did.abbozza.plugineditor.systems;

import de.uos.inf.did.abbozza.plugineditor.FileEntry;
import de.uos.inf.did.abbozza.plugineditor.gui.*;
import de.uos.inf.did.abbozza.plugineditor.IllegalPluginException;
import de.uos.inf.did.abbozza.plugineditor.XMLTool;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.ParseException;
import javax.swing.JFormattedTextField;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.JFormattedTextField.AbstractFormatterFactory;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *
 * @author michael
 */
public class WorldsPanel extends javax.swing.JPanel implements PluginPanel {

    protected PluginFrame frame;

    /**
     * Creates new form PluginInfoPanel
     */
    public WorldsPanel(PluginFrame frame) {
        this.frame = frame;
        initComponents();

        idField.getDocument().addDocumentListener(frame);
        nameField.getDocument().addDocumentListener(frame);
        sourceBox.addItemListener(frame);
        descriptionArea.getDocument().addDocumentListener(frame);

        fileList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    openFile();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        helpButton = new javax.swing.JButton();
        idField = new javax.swing.JFormattedTextField();
        enabledBox = new javax.swing.JCheckBox();
        sourceBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setEnabled(false);
        setMinimumSize(new java.awt.Dimension(400, 300));
        setName("World"); // NOI18N
        setPreferredSize(new java.awt.Dimension(400, 303));

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        idLabel.setText("ID");
        idLabel.setEnabled(false);

        nameLabel.setText("Display Name");
        nameLabel.setEnabled(false);

        nameField.setToolTipText("<html>The displayed name.</html>");
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        descriptionArea.setColumns(20);
        descriptionArea.setLineWrap(true);
        descriptionArea.setRows(5);
        descriptionArea.setToolTipText("<html>\nA short description of the functionality of the plugin.\n</html>");
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setEnabled(false);
        jScrollPane1.setViewportView(descriptionArea);

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/plugineditor/gui/help.png"))); // NOI18N
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        idField.setFormatterFactory(new AbstractFormatterFactory() {
            @Override
            public AbstractFormatter getFormatter(JFormattedTextField tf) {
                return new AbstractFormatter() {
                    @Override
                    public Object stringToValue(String text) throws ParseException {
                        return text.replaceAll("\\W","");
                    }

                    @Override
                    public String valueToString(Object value) throws ParseException {
                        if ( value == null ) return "";
                        return value.toString();
                    }
                };
            }
        });
        idField.setToolTipText("<html>\nThis is the id of the plugin.<br/>\nIt is used as part of the URL to access the<br/>\ncontents and services provided by teh plugin.<br/>\n<br/>\nIts maximal length is 32 characters and it may only<br/>\nconsist of letters and digits.\n</html>");
        idField.setEnabled(false);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        enabledBox.setText("Provide a World");
        enabledBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enabledBoxStateChanged(evt);
            }
        });
        enabledBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledBoxActionPerformed(evt);
            }
        });

        sourceBox.setText("Source code can be generated");
        sourceBox.setEnabled(false);
        sourceBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sourceBoxStateChanged(evt);
            }
        });

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "World.js", "Blocks.js", "Tools.js", "World.html", "World.css", "feature.xml" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(fileList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idLabel)
                        .addGap(5, 5, 5)
                        .addComponent(idField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sourceBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(enabledBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enabledBox)
                .addGap(18, 18, 18)
                .addComponent(nameLabel)
                .addGap(2, 2, 2)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceBox))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        HelpFrame.open("worlds_info");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        frame.setChanged(true);
    }//GEN-LAST:event_nameFieldActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        frame.setChanged(true);
    }//GEN-LAST:event_idFieldActionPerformed

    private void enabledBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enabledBoxStateChanged
        frame.setChanged(true);
        if (enabledBox.isSelected()) {
            setEnabledAll(true);
        } else {
            setEnabledAll(false);
        }
    }//GEN-LAST:event_enabledBoxStateChanged

    private void sourceBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sourceBoxStateChanged
        frame.setChanged(true);
    }//GEN-LAST:event_sourceBoxStateChanged

    private void enabledBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enabledBoxActionPerformed

    /**
     * Load the information from the plugin Element
     *
     * @param plugin The plugin element
     * @throws IllegalPluginException
     */
    public void load(Element plugin) throws IllegalPluginException {
        if (plugin != null) {
            Element world = XMLTool.getFirstElement(plugin, "world");
            if (world != null) {
                idField.setText(XMLTool.getStringAttribute(world, "id", "<id required>"));
                if ("true".equals(world.getAttribute("source"))) {
                    sourceBox.setSelected(true);
                } else {
                    sourceBox.setSelected(false);
                }
                nameField.setText(XMLTool.getTextContent(world, "name").trim());
                descriptionArea.setText(XMLTool.getTextContent(world, "description").trim());
            } else {
                idField.setText("new_plugin");
                sourceBox.setSelected(false);
                nameField.setText("A newly created plugin");
                descriptionArea.setText("A description for this new plugin");
            }
        } else {
            idField.setText("new_plugin");
            sourceBox.setSelected(false);
            nameField.setText("A newly created plugin");
            descriptionArea.setText("A description for this new plugin");
        }
    }

    /**
     * Save the information to the given element.
     *
     * @param xml The document containing the element
     * @param plugin The element
     */
    public void save(Document xml, Element plugin) {
        Element world = xml.createElement("world");
        world.setAttribute("id", idField.getText());
        if (sourceBox.isSelected()) {
            world.setAttribute("source", "true");
        } else {
            world.setAttribute("source", "false");
        }

        Element nm = (Element) xml.createElement("name");
        nm.setTextContent(nameField.getText());
        world.appendChild(nm);

        Element desc = (Element) xml.createElement("description");
        desc.setTextContent(descriptionArea.getText());
        world.appendChild(desc);

        plugin.appendChild(world);
    }

    /**
     * Get the current id entry.
     *
     * @return The id
     */
    public String getId() {
        return idField.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JCheckBox enabledBox;
    private javax.swing.JList<String> fileList;
    private javax.swing.JButton helpButton;
    private javax.swing.JFormattedTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JCheckBox sourceBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isBasePanel() {
        return false;
    }

    @Override
    public boolean build() {
        return true;
    }

    private void setEnabledAll(boolean flag) {
        nameLabel.setEnabled(flag);
        nameField.setEnabled(flag);
        idLabel.setEnabled(flag);
        idField.setEnabled(flag);
        descriptionArea.setEnabled(flag);
        sourceBox.setEnabled(flag);
        fileList.setEnabled(flag);
    }

    private void openFile() {
        // If nothing is selectged, do nothing.
        if (fileList.getSelectedIndex() < 0) {
            return;
        }

        String name = fileList.getSelectedValue();

        try {
            File file = new File(frame.getPluginPath() + "/world/" + name);
            int type = FileEntry.TYPE_MISC;
            if (name.endsWith(".java")) {
                type = FileEntry.TYPE_JAVA;
            } else if (name.endsWith(".js")) {
                type = FileEntry.TYPE_JS;
            }
            FileEntry entry = new FileEntry("world/" + name, null, type);

            if (!file.exists()) {
                String template = "templates/" + name;
                frame.createFile("/world/" + name, template);
            }

            String mimetype = Files.probeContentType(file.toPath());
            if ((mimetype != null) && mimetype.startsWith("image")) {

            } else {
                FileEditorPanel fileEditor = new FileEditorPanel(entry, this.frame);
                if ((entry.getType() == FileEntry.TYPE_JS) || ((mimetype != null) && mimetype.contains("javascript"))) {
                    fileEditor.setSyntaxStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
                } else if ((entry.getType() == FileEntry.TYPE_JAVA) || ((mimetype != null) && mimetype.contains("java"))) {
                    fileEditor.setSyntaxStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
                } else if ((mimetype != null) && mimetype.contains("xml")) {
                    fileEditor.setSyntaxStyle(SyntaxConstants.SYNTAX_STYLE_XML);
                } else if ((mimetype != null) && mimetype.contains("css")) {
                    fileEditor.setSyntaxStyle(SyntaxConstants.SYNTAX_STYLE_CSS);
                }
                frame.addFileContainerPanel(fileEditor, true);
            }
        } catch (IOException ex) {
            ex.printStackTrace(System.err);
        }

    }

}

/*
 * Copyright 2019 michael.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.uos.inf.did.abbozza.plugineditor.gui;

import de.uos.inf.did.abbozza.plugineditor.FileEntry;
import de.uos.inf.did.abbozza.plugineditor.GUITool;
import de.uos.inf.did.abbozza.plugineditor.IllegalPluginException;
import de.uos.inf.did.abbozza.plugineditor.PluginEditor;
import java.awt.Color;
import java.awt.Font;
import java.io.ByteArrayOutputStream;
import javax.swing.border.LineBorder;
import javax.swing.text.Highlighter;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import org.fife.ui.autocomplete.AutoCompletion;
import org.fife.ui.autocomplete.CompletionProvider;
import org.fife.ui.autocomplete.DefaultCompletionProvider;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *
 * @author michael
 */
public class FileEditorPanel extends javax.swing.JPanel implements PluginPanel {

    protected PluginFrame frame;
    protected RSyntaxTextArea editor;
    protected FileEntry entry;
    
    /**
     * Creates new form FileEditorPanel
     */
    public FileEditorPanel(FileEntry entry, PluginFrame frame) {
        this.frame = frame;
        this.entry = entry;
        
        initComponents();
        
        this.setName(entry.getName());

        editor = new RSyntaxTextArea(50, 120);
        editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
        editor.setCodeFoldingEnabled(true);
        editor.setTabSize(3);
        Font font = new Font("Courier New", Font.PLAIN, 14);
        if (!font.getFontName().equals("Courier New")) {
            font = new Font("DejaVu Sans Mono", Font.PLAIN, 14);
        }
        editor.setFont(font);

        Highlighter sourceHighlighter = editor.getHighlighter();

        RTextScrollPane editorPane = new RTextScrollPane(editor);
        editorPane.setBorder(new LineBorder(Color.red));
        editorPanel.add(editorPane, java.awt.BorderLayout.CENTER);

        CompletionProvider provider = createCompletionProvider();
        AutoCompletion ac = new AutoCompletion(provider);
        ac.install(editor);
        ac.setAutoActivationDelay(500);
        ac.setAutoActivationEnabled(true);

        editor.getDocument().addDocumentListener(frame);
        
        editor.setText( this.frame.getFileContent(this.entry) );        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        compileButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        editorPanel = new javax.swing.JPanel();

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        compileButton.setText("Compile");
        compileButton.setEnabled(false);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(compileButton);

        reloadButton.setText("Reload");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(reloadButton);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(saveButton);

        editorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editorPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 141, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        try { 
            load(null);
        } catch (IllegalPluginException ex) {}
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save(null,null);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        build();
    }//GEN-LAST:event_compileButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton compileButton;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Set the sytax style of the editor.
     * @param style 
     */
    public void setSyntaxStyle(String style) {
        editor.setSyntaxEditingStyle(style);
        if ( style == SyntaxConstants.SYNTAX_STYLE_JAVA ) {
            compileButton.setEnabled(true);
        } else {
            compileButton.setEnabled(false);            
        }
    }
    
    /**
     * Create a simple provider that adds some calliope related completions.
     */
    private CompletionProvider createCompletionProvider() {
        DefaultCompletionProvider provider = new DefaultCompletionProvider();

        /*
      try {
        InputStream autoCompleteXML = abbozza.getJarHandler().getInputStream("/lib/ac_" + abbozza.getSystem() + ".xml");
        provider.loadFromXML(autoCompleteXML);  
      } catch (IOException ex) {
      }
         */
        return provider;
    }

    /**
     * Load the content from the file.
     * @param plugin
     * @throws IllegalPluginException 
     */
    @Override
    public void load(Element plugin) throws IllegalPluginException {
        editor.setText( this.frame.getFileContent(this.entry) );
    }

    /**
     * Save the current content
     * 
     * @param xml
     * @param plugin 
     */
    @Override
    public void save(Document xml, Element plugin) {
        frame.writeFileContent(entry, editor.getText());
    }

    /**
     * Compile the file.
     */
    public boolean build() {
        save(null,null);
        
        frame.setStatusMsg("Compiling " + entry.getName() + " ...");

        String arguments = "";
        String system = frame.getSystem();
        if ( system.equals("arduino") && (PluginEditor.getArduinoJar() != null) )  {
            arguments = PluginEditor.getArduinoJar().getName(); 
        } else if ( system.equals("calliopeC")  && (PluginEditor.getCalliopeJar() != null) ) {
            arguments = PluginEditor.getCalliopeJar().getName();             
        } else if ( system.equals("worlds")  && (PluginEditor.getWorldsJar() != null) ) {
            arguments = PluginEditor.getWorldsJar().getName();             
        }
        
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ByteArrayOutputStream err = new ByteArrayOutputStream();
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        int result = compiler.run(null, out, err, "-cp" , arguments, frame.getPluginPath() + "/" + entry.getName() );
        if ( result == 0 ) {
            frame.setStatusMsg("Compliation of " + entry.getName() + " successfull!");
            return true;
        } else {
            frame.setErrorMsg("Error during compilation!");
            MessageFrame msgFrame = new MessageFrame("Error during compilation of " + entry.getName() , err.toString());
            GUITool.centerWindow(msgFrame);
            return false;
        }
    }

    @Override
    public boolean isBasePanel() {
        return true;
    }
    
}
